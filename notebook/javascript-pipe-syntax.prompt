Hey Hans, 

Please rewrite the following functions: 

```js
/*

This regex modification uses a negative lookahead ((?![^<>]*>)) 
to ensure that the match does not occur inside angle 
brackets (< and >), effectively excluding matches 
within an <svg> tag. The (^|[^<]) part ensures that 
the match is either at the beginning of the string or not preceded by a <.

 */
function wrapHashtags(text) {
  // Regular expression to find hashtags (words starting with #) excluding those preceded by a character
  const hashtagRegex = /(^|[^#\w])#([a-zA-Z0-9\-./]+)(?![^<>]*>)/g;
  // Replace hashtags with <hash-tag>...</hash-tag>
  const result = text.replace(hashtagRegex, '$1<hash-tag>$2</hash-tag>');
  return result;
}

/*

This regex modification uses a negative lookahead ((?![^<>]*>)) 
to ensure that the match does not occur inside angle 
brackets (< and >), effectively excluding matches 
within an <svg> tag. The (^|[^<]) part ensures that 
the match is either at the beginning of the string or not preceded by a <.

 */
function wrapVariables(text) {
  // Regular expression to find hashtags (words starting with #) excluding those inside <svg> tags
  const hashtagRegex = /(^|[^<])@([a-zA-Z0-9\-./]+)(?![^<>]*>)/g;
  // Replace hashtags with <hash-tag>...</hash-tag>
  const result = text.replace(hashtagRegex, '$1<variable-tag>$2</variable-tag>');
  return result;
}

/*

This regex modification uses a negative lookahead ((?![^<>]*>)) 
to ensure that the match does not occur inside angle 
brackets (< and >), effectively excluding matches 
within an <svg> tag. The (^|[^<]) part ensures that 
the match is either at the beginning of the string or not preceded by a <.

 */
function wrapEmbeds(text) {
  // Regular expression to find hashtags (words starting with #) excluding those inside <svg> tags
  const hashtagRegex = /(^|[^<])\##([a-zA-Z0-9\-./]+)(?![^<>]*>)/g;
  // Replace hashtags with <hash-tag>...</hash-tag>
  const result = text.replace(hashtagRegex, '$1<embed-tag>$2</embed-tag>');
  return result;
}


```

So that I can use these functions like so: 

```js

//function for wrapping hashtags in <hash-tag> tags
function wrapHashtags(text) {
  // Regular expression to find hashtags (words starting with #) excluding those preceded by a character
  const hashtagRegex = /(^|[^#\w])#([a-zA-Z0-9\-./]+)(?![^<>]*>)/g;
  // Replace hashtags with <hash-tag>...</hash-tag>
  const result = text.replace(hashtagRegex, '$1<hash-tag>$2</hash-tag>');
  return result;
}

//function for wrapping variables in <variable-tag> tags
function wrapVariables(text) {
  // Regular expression to find hashtags (words starting with #) excluding those inside <svg> tags
  const hashtagRegex = /(^|[^<])@([a-zA-Z0-9\-./]+)(?![^<>]*>)/g;
  // Replace hashtags with <hash-tag>...</hash-tag>
  const result = text.replace(hashtagRegex, '$1<variable-tag>$2</variable-tag>');
  return result;
}

//function for wrapping embeds in <embed-tag> tags
function wrapEmbeds(text) {
  // Regular expression to find hashtags (words starting with #) excluding those inside <svg> tags
  const hashtagRegex = /(^|[^<])\##([a-zA-Z0-9\-./]+)(?![^<>]*>)/g;
  // Replace hashtags with <hash-tag>...</hash-tag>
  const result = text.replace(hashtagRegex, '$1<embed-tag>$2</embed-tag>');
  return result;
}

//prototype function for using all three wrapping functions in one line
String.prototype.wrapHashtags = function() {
  return wrapHashtags(this);
};

String.prototype.wrapVariables = function() {
  return wrapVariables(this);
};

String.prototype.wrapEmbeds = function() {
  return wrapEmbeds(this);
};

```

Now I can use these functions like so:

```js
const processed_string = str.wrapHashtags().wrapVariables().wrapEmbeds()
```

const processed_string = str.wrapHashtags().wrapVariables().wrapEmbeds()
```

---


